1. Conceptual Aside Classical vs Prototypal Inheritance

* different than other oop languages

---> one object gets access to the properties and methods of another object

// classical #c, java. ==> way it is used to be done

very verbose


// prototypal Inheritance

simple, flexible, extensible, easy to understand




2. Understanding the Prototype


obj --> prop1 obj.prop1

all objects (function as well) have proto property, its another object

prototypes can have other prototypes as properties



Prototype Chan --> sequance of proto objects, 

first look at OBJ (top of the chain) than goes down.


var person {
    firstname: 'Default',
    lastname: 'Default',
    getFullName: function() {
        return this.firsname + ' ' + thiis.lastname;
    }
}


var john = {
    firstname: 'John',
    lastname: 'Doe'
}


dont do this EVER! for demo purposes only, performance issues

john.__proto__ = person;
console.log(john.getFullName());
==> engine knows $this refers to John. engine finds getFullName down the protochain!


3. Everything is an Object (or a primitive)

var a = {};
var b = function() {};
var c = [];

see in console ==>
a.__proto__. 
b.__proto__. 
c.__proto__. 

a.__proto__.__proto__   =>> bottom of the chain (always)


4. Reflection and Extend

// Refleciton ==> An object can look at itself, listing and changing its properties and methods.


var person {
    firstname: 'Default',
    lastname: 'Default',
    getFullName: function() {
        return this.firsname + ' ' + thiis.lastname;
    }
}


var john = {
    firstname: 'John',
    lastname: 'Doe'
}


dont do this EVER! for demo purposes only, performance issues

john.__proto__ = person;

// loop over every member in the object

for (var prop in john) {
    console.log(prop + ': ' john[prop]);
}


// HOLE!


var jane = {
    adress:  '111 Main St.',
    getFormalFullName: function() {
        return this.lastname + ', ' + this.firstname;
    }
}

var jim = {
    getFirstName: function() {
        return firstname;
    }
}

_.extend(john,jane,jim); ==> underscore js!! library functionality ==> before es6


extends ==> es6 functionality


